{"id":"node_modules/flairup/dist/index.js","dependencies":[{"name":"C:\\Users\\ADARSH SINGH\\Desktop\\Food_App\\node_modules\\flairup\\dist\\index.js.map","includedInParent":true,"mtime":1706604858089},{"name":"C:\\Users\\ADARSH SINGH\\Desktop\\Food_App\\package.json","includedInParent":true,"mtime":1706679953353},{"name":"C:\\Users\\ADARSH SINGH\\Desktop\\Food_App\\node_modules\\flairup\\package.json","includedInParent":true,"mtime":1706604858079}],"generated":{"js":"\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _instanceof(left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n        return !!right[Symbol.hasInstance](left);\n    } else {\n        return left instanceof right;\n    }\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = function(target, all) {\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = function(to, from, except, desc) {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            var _loop = function() {\n                var key = _step.value;\n                if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n                    get: function() {\n                        return from[key];\n                    },\n                    enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n                });\n            };\n            for(var _iterator = __getOwnPropNames(from)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n    }\n    return to;\n};\nvar __toCommonJS = function(mod) {\n    return __copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n};\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    createSheet: function() {\n        return createSheet;\n    },\n    cx: function() {\n        return cx;\n    }\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/utils/asArray.ts\nfunction asArray(v) {\n    return [].concat(v);\n}\n// src/utils/is.ts\nfunction isPsuedoSelector(selector) {\n    return selector.startsWith(\":\");\n}\nfunction isStyleCondition(selector) {\n    return isString(selector) && (selector === \"*\" || selector.length > 1 && \":>~.+*\".includes(selector.slice(0, 1)) || isImmediatePostcondition(selector));\n}\nfunction isValidProperty(property, value) {\n    return (isString(value) || typeof value === \"number\") && !isCssVariables(property) && !isPsuedoSelector(property) && !isMediaQuery(property);\n}\nfunction isMediaQuery(selector) {\n    return selector.startsWith(\"@media\");\n}\nfunction isDirectClass(selector) {\n    return selector === \".\";\n}\nfunction isCssVariables(selector) {\n    return selector === \"--\";\n}\nfunction isString(value) {\n    return value + \"\" === value;\n}\nfunction isImmediatePostcondition(value) {\n    return isString(value) && (value.startsWith(\"&\") || isPsuedoSelector(value));\n}\n// src/utils/joinTruthy.ts\nfunction joinTruthy(arr) {\n    var delimiter = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n    return arr.filter(Boolean).join(delimiter);\n}\n// src/utils/stableHash.ts\nfunction stableHash(prefix, seed) {\n    var hash = 0;\n    if (seed.length === 0) return hash.toString();\n    for(var i = 0; i < seed.length; i++){\n        var char = seed.charCodeAt(i);\n        hash = (hash << 5) - hash + char;\n        hash = hash & hash;\n    }\n    return \"\".concat(prefix !== null && prefix !== void 0 ? prefix : \"cl\", \"_\").concat(hash.toString(36));\n}\n// src/utils/stringManipulators.ts\nfunction handlePropertyValue(property, value) {\n    if (property === \"content\") {\n        return '\"'.concat(value, '\"');\n    }\n    return value;\n}\nfunction camelCaseToDash(str) {\n    return str.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\nfunction joinedProperty(property, value) {\n    return \"\".concat(property, \":\").concat(value);\n}\nfunction toClass(str) {\n    return str ? \".\".concat(str) : \"\";\n}\nfunction appendString(base, line) {\n    return base ? \"\".concat(base, \"\\n\").concat(line) : line;\n}\n// src/Rule.ts\nvar Rule = /*#__PURE__*/ function() {\n    function _Rule(sheet, property, value, selector) {\n        _class_call_check(this, _Rule);\n        this.sheet = sheet;\n        this.property = property;\n        this.value = value;\n        this.selector = selector;\n        this.property = property;\n        this.value = value;\n        this.joined = joinedProperty(property, value);\n        var joinedConditions = this.selector.preconditions.concat(this.selector.postconditions);\n        this.hash = this.selector.hasConditions ? this.selector.scopeClassName : stableHash(this.sheet.name, this.joined);\n        this.key = joinTruthy([\n            this.joined,\n            joinedConditions,\n            this.hash\n        ]);\n    }\n    _create_class(_Rule, [\n        {\n            key: \"toString\",\n            value: function toString() {\n                var selectors = mergeSelectors(this.selector.preconditions, {\n                    right: this.hash\n                });\n                selectors = mergeSelectors(this.selector.postconditions, {\n                    left: selectors\n                });\n                return \"\".concat(selectors, \" {\").concat(_Rule.genRule(this.property, this.value), \"}\");\n            }\n        }\n    ], [\n        {\n            key: \"genRule\",\n            value: function genRule(property, value) {\n                var transformedProperty = camelCaseToDash(property);\n                return joinedProperty(transformedProperty, handlePropertyValue(property, value)) + \";\";\n            }\n        }\n    ]);\n    return _Rule;\n}();\nfunction mergeSelectors(selectors) {\n    var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref_left = _ref.left, left = _ref_left === void 0 ? \"\" : _ref_left, _ref_right = _ref.right, right = _ref_right === void 0 ? \"\" : _ref_right;\n    var output = selectors.reduce(function(selectors2, current) {\n        if (isPsuedoSelector(current)) {\n            return selectors2 + current;\n        }\n        if (isImmediatePostcondition(current)) {\n            return selectors2 + current.slice(1);\n        }\n        return joinTruthy([\n            selectors2,\n            current\n        ], \" \");\n    }, left);\n    return joinTruthy([\n        output,\n        toClass(right)\n    ], \" \");\n}\nvar Selector = /*#__PURE__*/ function() {\n    function _Selector(sheet) {\n        var scopeName = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, _ref = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, preconditions = _ref.preconditions, postconditions = _ref.postconditions;\n        _class_call_check(this, _Selector);\n        this.sheet = sheet;\n        this.preconditions = [];\n        this.scopeClassName = null;\n        this.scopeName = null;\n        this.postconditions = [];\n        this.preconditions = preconditions ? asArray(preconditions) : [];\n        this.postconditions = postconditions ? asArray(postconditions) : [];\n        this.setScope(scopeName);\n    }\n    _create_class(_Selector, [\n        {\n            key: \"setScope\",\n            value: function setScope(scopeName) {\n                if (!scopeName) {\n                    return this;\n                }\n                if (!this.scopeClassName) {\n                    this.scopeName = scopeName;\n                    this.scopeClassName = stableHash(this.sheet.name, // adding the count guarantees uniqueness across style.create calls\n                    scopeName + this.sheet.count);\n                }\n                return this;\n            }\n        },\n        {\n            key: \"hasConditions\",\n            get: function get() {\n                return this.preconditions.length > 0 || this.postconditions.length > 0;\n            }\n        },\n        {\n            key: \"addScope\",\n            value: function addScope(scopeName) {\n                return new _Selector(this.sheet, scopeName, {\n                    preconditions: this.preconditions,\n                    postconditions: this.postconditions\n                });\n            }\n        },\n        {\n            key: \"addPrecondition\",\n            value: function addPrecondition(precondition) {\n                return new _Selector(this.sheet, this.scopeClassName, {\n                    postconditions: this.postconditions,\n                    preconditions: this.preconditions.concat(precondition)\n                });\n            }\n        },\n        {\n            key: \"addPostcondition\",\n            value: function addPostcondition(postcondition) {\n                return new _Selector(this.sheet, this.scopeClassName, {\n                    preconditions: this.preconditions,\n                    postconditions: this.postconditions.concat(postcondition)\n                });\n            }\n        },\n        {\n            key: \"createRule\",\n            value: function createRule(property, value) {\n                return new Rule(this.sheet, property, value, this);\n            }\n        }\n    ]);\n    return _Selector;\n}();\n// src/Sheet.ts\nvar Sheet = /*#__PURE__*/ function() {\n    function Sheet(name) {\n        _class_call_check(this, Sheet);\n        this.name = name;\n        // Hash->css\n        this.storedStyles = {};\n        // styles->hash\n        this.storedClasses = {};\n        this.style = \"\";\n        this.count = 0;\n        this.id = \"flairup-\".concat(name);\n        this.styleTag = this.createStyleTag();\n    }\n    _create_class(Sheet, [\n        {\n            key: \"getStyle\",\n            value: function getStyle() {\n                return this.style;\n            }\n        },\n        {\n            key: \"append\",\n            value: function append(css) {\n                this.style = appendString(this.style, css);\n            }\n        },\n        {\n            key: \"apply\",\n            value: function apply() {\n                this.count++;\n                if (!this.styleTag) {\n                    return;\n                }\n                this.styleTag.innerHTML = this.style;\n            }\n        },\n        {\n            key: \"isApplied\",\n            value: function isApplied() {\n                return !!this.styleTag;\n            }\n        },\n        {\n            key: \"createStyleTag\",\n            value: function createStyleTag() {\n                if (typeof document === \"undefined\" || this.isApplied()) {\n                    return this.styleTag;\n                }\n                var styleTag = document.createElement(\"style\");\n                styleTag.type = \"text/css\";\n                styleTag.id = this.id;\n                document.head.appendChild(styleTag);\n                return styleTag;\n            }\n        },\n        {\n            key: \"addRule\",\n            value: function addRule(rule) {\n                var storedClass = this.storedClasses[rule.key];\n                if (isString(storedClass)) {\n                    return storedClass;\n                }\n                this.storedClasses[rule.key] = rule.hash;\n                this.storedStyles[rule.hash] = [\n                    rule.property,\n                    rule.value\n                ];\n                this.append(rule.toString());\n                return rule.hash;\n            }\n        }\n    ]);\n    return Sheet;\n}();\n// src/utils/forIn.ts\nfunction forIn(obj, fn) {\n    for(var key in obj){\n        fn(key.trim(), obj[key]);\n    }\n}\n// src/cx.ts\nfunction cx() {\n    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n        args[_key] = arguments[_key];\n    }\n    var classes = args.reduce(function(classes2, arg) {\n        if (_instanceof(arg, Set)) {\n            var _classes2;\n            (_classes2 = classes2).push.apply(_classes2, _to_consumable_array(arg));\n        } else if (typeof arg === \"string\") {\n            classes2.push(arg);\n        } else if (Array.isArray(arg)) {\n            classes2.push(cx.apply(void 0, _to_consumable_array(arg)));\n        } else if (typeof arg === \"object\") {\n            Object.entries(arg).forEach(function(param) {\n                var _param = _sliced_to_array(param, 2), key = _param[0], value = _param[1];\n                if (value) {\n                    classes2.push(key);\n                }\n            });\n        }\n        return classes2;\n    }, []);\n    return joinTruthy(classes, \" \").trim();\n}\n// src/index.ts\nfunction createSheet(name) {\n    var sheet = new Sheet(name);\n    return {\n        create: create,\n        getStyle: sheet.getStyle.bind(sheet),\n        isApplied: sheet.isApplied.bind(sheet)\n    };\n    function create(styles) {\n        var scopedStyles = {};\n        iteratePreconditions(sheet, styles, new Selector(sheet)).forEach(function(param) {\n            var _param = _sliced_to_array(param, 3), scopeName = _param[0], styles2 = _param[1], selector = _param[2];\n            iterateStyles(sheet, styles2, selector).forEach(function(className) {\n                addScopedStyle(scopeName, className);\n            });\n        });\n        sheet.apply();\n        return scopedStyles;\n        function addScopedStyle(name2, className) {\n            var _scopedStyles_name2;\n            scopedStyles[name2] = (_scopedStyles_name2 = scopedStyles[name2]) !== null && _scopedStyles_name2 !== void 0 ? _scopedStyles_name2 : /* @__PURE__ */ new Set();\n            scopedStyles[name2].add(className);\n        }\n    }\n}\nfunction iteratePreconditions(sheet, styles, selector) {\n    var output = [];\n    forIn(styles, function(key, value) {\n        if (isStyleCondition(key)) {\n            return iteratePreconditions(sheet, value, selector.addPrecondition(key)).forEach(function(item) {\n                return output.push(item);\n            });\n        }\n        output.push([\n            key,\n            styles[key],\n            selector.addScope(key)\n        ]);\n    });\n    return output;\n}\nfunction iterateStyles(sheet, styles, selector) {\n    var output = /* @__PURE__ */ new Set();\n    forIn(styles, function(property, value) {\n        var res = [];\n        if (isStyleCondition(property)) {\n            res = iterateStyles(sheet, value, selector.addPostcondition(property));\n        } else if (isDirectClass(property)) {\n            res = asArray(value);\n        } else if (isMediaQuery(property)) {\n            res = handleMediaQuery(sheet, value, property, selector);\n        } else if (isCssVariables(property)) {\n            res = cssVariablesBlock(sheet, value, selector);\n        } else if (isValidProperty(property, value)) {\n            var rule = selector.createRule(property, value);\n            sheet.addRule(rule);\n            output.add(rule.hash);\n        }\n        return addEachClass(res, output);\n    });\n    return output;\n}\nfunction addEachClass(list, to) {\n    list.forEach(function(className) {\n        return to.add(className);\n    });\n    return to;\n}\nfunction cssVariablesBlock(sheet, styles, selector) {\n    var classes = /* @__PURE__ */ new Set();\n    var chunkRows = [];\n    forIn(styles, function(property, value) {\n        if (isValidProperty(property, value)) {\n            chunkRows.push(Rule.genRule(property, value));\n            return;\n        }\n        var res = iterateStyles(sheet, value !== null && value !== void 0 ? value : {}, selector);\n        addEachClass(res, classes);\n    });\n    if (!selector.scopeClassName) {\n        return classes;\n    }\n    if (chunkRows.length) {\n        var output = chunkRows.join(\" \");\n        sheet.append(\"\".concat(mergeSelectors(selector.preconditions, {\n            right: selector.scopeClassName\n        }), \" {\").concat(output, \"}\"));\n    }\n    classes.add(selector.scopeClassName);\n    return classes;\n}\nfunction handleMediaQuery(sheet, styles, mediaQuery, selector) {\n    sheet.append(mediaQuery + \" {\");\n    var output = iterateStyles(sheet, styles, selector);\n    sheet.append(\"}\");\n    return output;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n    createSheet: createSheet,\n    cx: cx\n});\n"},"sourceMaps":{"js":{"version":3,"sources":["../src/index.ts","../src/utils/asArray.ts","../src/utils/is.ts","../src/utils/joinTruthy.ts","../src/utils/stableHash.ts","../src/utils/stringManipulators.ts","../src/Rule.ts","../src/Sheet.ts","../src/utils/forIn.ts","../src/cx.ts"],"names":["selectors","classes","styles","name"],"mappings":"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","sourcesContent":["import { Rule, Selector, mergeSelectors } from './Rule.js';\nimport { Sheet } from './Sheet.js';\nimport {\n  CSSVariablesObject,\n  ClassSet,\n  CreateSheetInput,\n  DirectClass,\n  ScopedStyles,\n  Styles,\n  createSheetReturn,\n} from './types.js';\nimport { asArray } from './utils/asArray.js';\nimport { forIn } from './utils/forIn.js';\nimport {\n  isCssVariables,\n  isDirectClass,\n  isMediaQuery,\n  isStyleCondition,\n  isValidProperty,\n} from './utils/is.js';\n\nexport { cx } from './cx.js';\n\nexport type { CreateSheetInput, Styles };\n\nexport function createSheet(name: string): createSheetReturn {\n  const sheet = new Sheet(name);\n\n  return {\n    create,\n    getStyle: sheet.getStyle.bind(sheet),\n    isApplied: sheet.isApplied.bind(sheet),\n  };\n\n  function create<K extends string>(styles: CreateSheetInput<K>) {\n    const scopedStyles: ScopedStyles<K> = {} as ScopedStyles<K>;\n\n    iteratePreconditions(sheet, styles, new Selector(sheet)).forEach(\n      ([scopeName, styles, selector]) => {\n        iterateStyles(sheet, styles as Styles, selector).forEach(\n          (className) => {\n            addScopedStyle(scopeName as K, className);\n          },\n        );\n      },\n    );\n\n    // Commit the styles to the sheet.\n    // Done only once per create call.\n    // This way we do not update the DOM on every style.\n    sheet.apply();\n\n    return scopedStyles;\n\n    function addScopedStyle(name: K, className: string) {\n      scopedStyles[name as keyof ScopedStyles<K>] =\n        scopedStyles[name as keyof ScopedStyles<K>] ?? new Set<string>();\n      scopedStyles[name as keyof ScopedStyles<K>].add(className);\n    }\n  }\n}\n\n// This one plucks out all of the preconditions\n// and creates selector objects from them\nfunction iteratePreconditions(\n  sheet: Sheet,\n  styles: Styles,\n  selector: Selector,\n) {\n  const output: Array<[string, Styles, Selector]> = [];\n\n  forIn(styles, (key: string, value) => {\n    if (isStyleCondition(key)) {\n      return iteratePreconditions(\n        sheet,\n        value as Styles,\n        selector.addPrecondition(key),\n      ).forEach((item) => output.push(item));\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore - this is a valid case\n    output.push([key, styles[key], selector.addScope(key)]);\n  });\n\n  return output;\n}\n\nfunction iterateStyles(\n  sheet: Sheet,\n  styles: Styles,\n  selector: Selector,\n): ClassSet {\n  const output: ClassSet = new Set<string>();\n  // eslint-disable-next-line max-statements\n  forIn(styles, (property, value) => {\n    let res: string[] | Set<string> = [];\n\n    // Postconditions\n    if (isStyleCondition(property)) {\n      res = iterateStyles(\n        sheet,\n        value as Styles,\n        selector.addPostcondition(property),\n      );\n      // Direct classes: \".\": \"className\"\n    } else if (isDirectClass(property)) {\n      res = asArray(value as DirectClass);\n    } else if (isMediaQuery(property)) {\n      res = handleMediaQuery(sheet, value as Styles, property, selector);\n\n      // \"--\": { \"--variable\": \"value\" }\n    } else if (isCssVariables(property)) {\n      res = cssVariablesBlock(sheet, value as CSSVariablesObject, selector);\n\n      // \"property\": \"value\"\n    } else if (isValidProperty(property, value)) {\n      const rule = selector.createRule(property, value);\n      sheet.addRule(rule);\n      output.add(rule.hash);\n    }\n\n    return addEachClass(res, output);\n  });\n\n  return output;\n}\n\nfunction addEachClass(list: string[] | Set<string>, to: Set<string>) {\n  list.forEach((className) => to.add(className));\n  return to;\n}\n\n// eslint-disable-next-line max-statements\nfunction cssVariablesBlock(\n  sheet: Sheet,\n  styles: CSSVariablesObject,\n  selector: Selector,\n) {\n  const classes: ClassSet = new Set<string>();\n\n  const chunkRows: string[] = [];\n  forIn(styles, (property: string, value) => {\n    if (isValidProperty(property, value)) {\n      chunkRows.push(Rule.genRule(property, value));\n      return;\n    }\n    const res = iterateStyles(sheet, value ?? {}, selector);\n    addEachClass(res, classes);\n  });\n\n  if (!selector.scopeClassName) {\n    return classes;\n  }\n\n  if (chunkRows.length) {\n    const output = chunkRows.join(' ');\n    sheet.append(\n      `${mergeSelectors(selector.preconditions, {\n        right: selector.scopeClassName,\n      })} {${output}}`,\n    );\n  }\n\n  classes.add(selector.scopeClassName);\n  return classes;\n}\n\nfunction handleMediaQuery(\n  sheet: Sheet,\n  styles: Styles,\n  mediaQuery: string,\n  selector: Selector,\n) {\n  sheet.append(mediaQuery + ' {');\n\n  // iterateStyles will internally append each rule to the sheet\n  // as needed. All we have to do is just open the block and close it after.\n  const output = iterateStyles(sheet, styles, selector);\n\n  sheet.append('}');\n\n  return output;\n}\n","export function asArray<T>(v: T | T[]): T[] {\n  return [].concat(v as unknown as []);\n}\n","import { ClassName } from '../types.js';\n\nexport function isPsuedoSelector(selector: string): boolean {\n  return selector.startsWith(':');\n}\n\nexport function isStyleCondition(selector: string): boolean {\n  return (\n    isString(selector) &&\n    (selector === '*' ||\n      (selector.length > 1 && ':>~.+*'.includes(selector.slice(0, 1))) ||\n      isImmediatePostcondition(selector))\n  );\n}\n\nexport function isValidProperty(\n  property: string,\n  value: unknown,\n): value is string {\n  return (\n    (isString(value) || typeof value === 'number') &&\n    !isCssVariables(property) &&\n    !isPsuedoSelector(property) &&\n    !isMediaQuery(property)\n  );\n}\n\nexport function isMediaQuery(selector: string): boolean {\n  return selector.startsWith('@media');\n}\n\nexport function isDirectClass(selector: string): boolean {\n  return selector === '.';\n}\n\nexport function isCssVariables(selector: string): boolean {\n  return selector === '--';\n}\n\nexport function isString(value: unknown): value is string {\n  return value + '' === value;\n}\n\nexport function isClassName(value: unknown): value is ClassName {\n  return isString(value) && value.length > 1 && value.startsWith('.');\n}\n\nexport function isImmediatePostcondition(\n  value: unknown,\n): value is `&${string}` {\n  return isString(value) && (value.startsWith('&') || isPsuedoSelector(value));\n}\n","export function joinTruthy(arr: unknown[], delimiter: string = ''): string {\n  return arr.filter(Boolean).join(delimiter);\n}\n","// Stable hash function.\nexport function stableHash(prefix: string, seed: string): string {\n  let hash = 0;\n  if (seed.length === 0) return hash.toString();\n  for (let i = 0; i < seed.length; i++) {\n    const char = seed.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  return `${prefix ?? 'cl'}_${hash.toString(36)}`;\n}\n","// Some properties need special handling\nexport function handlePropertyValue(property: string, value: string): string {\n  if (property === 'content') {\n    return `\"${value}\"`;\n  }\n\n  return value;\n}\n\nexport function camelCaseToDash(str: string): string {\n  return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n\nexport function joinedProperty(property: string, value: string): string {\n  return `${property}:${value}`;\n}\n\nexport function toClass(str: string): string {\n  return str ? `.${str}` : '';\n}\n\nexport function appendString(base: string, line: string): string {\n  return base ? `${base}\\n${line}` : line;\n}\n","import { Sheet } from './Sheet';\nimport { asArray } from './utils/asArray';\nimport { isImmediatePostcondition, isPsuedoSelector } from './utils/is';\nimport { joinTruthy } from './utils/joinTruthy';\nimport { stableHash } from './utils/stableHash';\nimport {\n  camelCaseToDash,\n  handlePropertyValue,\n  joinedProperty,\n  toClass,\n} from './utils/stringManipulators';\n\nexport class Rule {\n  public hash: string;\n  public joined: string;\n  public key: string;\n\n  constructor(\n    private sheet: Sheet,\n    public property: string,\n    public value: string,\n    private selector: Selector,\n  ) {\n    this.property = property;\n    this.value = value;\n    this.joined = joinedProperty(property, value);\n    const joinedConditions = this.selector.preconditions.concat(\n      this.selector.postconditions,\n    );\n    this.hash = this.selector.hasConditions\n      ? (this.selector.scopeClassName as string)\n      : stableHash(this.sheet.name, this.joined);\n    this.key = joinTruthy([this.joined, joinedConditions, this.hash]);\n  }\n\n  public toString(): string {\n    let selectors = mergeSelectors(this.selector.preconditions, {\n      right: this.hash,\n    });\n\n    selectors = mergeSelectors(this.selector.postconditions, {\n      left: selectors,\n    });\n\n    return `${selectors} {${Rule.genRule(this.property, this.value)}}`;\n  }\n\n  static genRule(property: string, value: string): string {\n    const transformedProperty = camelCaseToDash(property);\n    return (\n      joinedProperty(\n        transformedProperty,\n        handlePropertyValue(property, value),\n      ) + ';'\n    );\n  }\n}\n\nexport function mergeSelectors(\n  selectors: string[],\n  { left = '', right = '' }: { left?: string; right?: string } = {},\n): string {\n  const output = selectors.reduce((selectors, current) => {\n    if (isPsuedoSelector(current)) {\n      return selectors + current;\n    }\n\n    if (isImmediatePostcondition(current)) {\n      return selectors + current.slice(1);\n    }\n\n    return joinTruthy([selectors, current], ' ');\n\n    // selector then postcondition\n  }, left);\n\n  // preconditions, then selector\n  return joinTruthy([output, toClass(right)], ' ');\n}\n\nexport class Selector {\n  public preconditions: string[] = [];\n  public scopeClassName: string | null = null;\n  public scopeName: string | null = null;\n  public postconditions: string[] = [];\n\n  constructor(\n    private sheet: Sheet,\n    scopeName: string | null = null,\n    {\n      preconditions,\n      postconditions,\n    }: {\n      preconditions?: string[] | string | undefined;\n      postconditions?: string[] | string | undefined;\n    } = {},\n  ) {\n    this.preconditions = preconditions ? asArray(preconditions) : [];\n    this.postconditions = postconditions ? asArray(postconditions) : [];\n    this.setScope(scopeName);\n  }\n\n  private setScope(scopeName: string | null): Selector {\n    if (!scopeName) {\n      return this;\n    }\n\n    if (!this.scopeClassName) {\n      this.scopeName = scopeName;\n      this.scopeClassName = stableHash(\n        this.sheet.name,\n        // adding the count guarantees uniqueness across style.create calls\n        scopeName + this.sheet.count,\n      );\n    }\n\n    return this;\n  }\n\n  get hasConditions(): boolean {\n    return this.preconditions.length > 0 || this.postconditions.length > 0;\n  }\n\n  addScope(scopeName: string): Selector {\n    return new Selector(this.sheet, scopeName, {\n      preconditions: this.preconditions,\n      postconditions: this.postconditions,\n    });\n  }\n\n  addPrecondition(precondition: string): Selector {\n    return new Selector(this.sheet, this.scopeClassName, {\n      postconditions: this.postconditions,\n      preconditions: this.preconditions.concat(precondition),\n    });\n  }\n\n  addPostcondition(postcondition: string): Selector {\n    return new Selector(this.sheet, this.scopeClassName, {\n      preconditions: this.preconditions,\n      postconditions: this.postconditions.concat(postcondition),\n    });\n  }\n\n  createRule(property: string, value: string): Rule {\n    return new Rule(this.sheet, property, value, this);\n  }\n}\n","import { Rule } from './Rule.js';\nimport { StoredStyles } from './types.js';\nimport { isString } from './utils/is.js';\nimport { appendString } from './utils/stringManipulators.js';\n\nexport class Sheet {\n  private styleTag: HTMLStyleElement | undefined;\n\n  // Hash->css\n  private storedStyles: StoredStyles = {};\n\n  // styles->hash\n  private storedClasses: Record<string, string> = {};\n  private style: string = '';\n  public count = 0;\n  public id: string;\n\n  constructor(public name: string) {\n    this.id = `flairup-${name}`;\n\n    this.styleTag = this.createStyleTag();\n  }\n\n  getStyle(): string {\n    return this.style;\n  }\n\n  append(css: string): void {\n    this.style = appendString(this.style, css);\n  }\n\n  apply(): void {\n    this.count++;\n\n    if (!this.styleTag) {\n      return;\n    }\n\n    this.styleTag.innerHTML = this.style;\n  }\n\n  isApplied(): boolean {\n    return !!this.styleTag;\n  }\n\n  createStyleTag(): HTMLStyleElement | undefined {\n    // check that we're in the browser and have access to the DOM\n    if (typeof document === 'undefined' || this.isApplied()) {\n      return this.styleTag;\n    }\n\n    const styleTag = document.createElement('style');\n    styleTag.type = 'text/css';\n    styleTag.id = this.id;\n    document.head.appendChild(styleTag);\n    return styleTag;\n  }\n\n  addRule(rule: Rule): string {\n    const storedClass = this.storedClasses[rule.key];\n\n    if (isString(storedClass)) {\n      return storedClass;\n    }\n\n    this.storedClasses[rule.key] = rule.hash;\n    this.storedStyles[rule.hash] = [rule.property, rule.value];\n\n    this.append(rule.toString());\n    return rule.hash;\n  }\n}\n","export function forIn<O extends Record<string, unknown>>(\n  obj: O,\n  fn: (key: string, value: O[string]) => void,\n): void {\n  for (const key in obj) {\n    fn(key.trim(), obj[key]);\n  }\n}\n","import { joinTruthy } from './utils/joinTruthy';\n\nexport function cx(...args: unknown[]): string {\n  const classes = args.reduce((classes: string[], arg) => {\n    if (arg instanceof Set) {\n      classes.push(...arg);\n    } else if (typeof arg === 'string') {\n      classes.push(arg);\n    } else if (Array.isArray(arg)) {\n      classes.push(cx(...arg));\n    } else if (typeof arg === 'object') {\n      // @ts-expect-error - it is a string\n      Object.entries(arg).forEach(([key, value]) => {\n        if (value) {\n          classes.push(key);\n        }\n      });\n    }\n\n    return classes;\n  }, [] as string[]);\n\n  return joinTruthy(classes, ' ').trim();\n}\n"]}},"error":null,"hash":"c3cf0044f3bff6961633f3535d919491","cacheData":{"env":{}}}